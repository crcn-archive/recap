// Generated by CoffeeScript 1.6.3
var GroupListener, toarray,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

toarray = require("toarray");

GroupListener = (function(_super) {
  __extends(GroupListener, _super);

  /*
  */


  function GroupListener(listeners) {
    this._onEvent = __bind(this._onEvent, this);
    var listener, _i, _len, _ref;
    this._listeners = toarray(listeners);
    _ref = this._listeners;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      listener.on("event", this._onEvent);
    }
  }

  /*
  */


  GroupListener.prototype.start = function() {
    var listener, _i, _len, _ref, _results;
    _ref = this._listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      _results.push(listener.start());
    }
    return _results;
  };

  /*
  */


  GroupListener.prototype.stop = function() {
    var listener, _i, _len, _ref, _results;
    _ref = this._listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      _results.push(listener.stop());
    }
    return _results;
  };

  /*
  */


  GroupListener.prototype._onEvent = function(event) {
    this.emit(event.type, event.data);
    this.emit("event", event);
    return this.emit(event.listener + ".event", event);
  };

  return GroupListener;

})(require("./base"));

module.exports = function(listeners) {
  return new GroupListener(listeners);
};
