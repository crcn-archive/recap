// Generated by CoffeeScript 1.6.3
var Recorder, Runners, events,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Runners = require("./runners");

events = require("events");

Recorder = (function(_super) {
  __extends(Recorder, _super);

  /*
  */


  function Recorder(_listener) {
    this._listener = _listener;
    this._onEvent = __bind(this._onEvent, this);
    this._listener.start();
    this.runners = new Runners();
    this._listener.on("event", this._onEvent);
  }

  /*
  */


  Recorder.prototype.start = function(name) {
    this._recording = true;
    return this.current = this.runners.get(name).start();
  };

  /*
  */


  Recorder.prototype.stop = function() {
    this._recording = false;
    return this;
  };

  /*
  */


  Recorder.prototype.remove = function(name) {
    this.runners.remove(name);
    this._update();
    return this;
  };

  /*
  */


  Recorder.prototype.clear = function() {
    this.runners.clear();
    this._update();
    return this;
  };

  /*
  */


  Recorder.prototype._onEvent = function(event) {
    if (event.listener !== "dom" || this._recording !== true) {
      return;
    }
    console.log("%c %s %s", "color:#FF00FF;", event.type, event.data.xpath);
    this.current.actions.push(event);
    return this._update();
  };

  /*
  */


  Recorder.prototype._update = function() {
    return this.emit("update");
  };

  return Recorder;

})(events.EventEmitter);

module.exports = Recorder;
